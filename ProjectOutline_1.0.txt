For ChatGPT:
-no emoji'scheduling
-no canvas
-only produce code when asked to, but when debugging: limit your reasoning messages - produce the code
-your have access to https://github.com/drWilms/JellyfishProject.git
. Use `HWconfig.h` for all hardware settings, e.g. pin numbers
. Use Java-like style with getters and Setters
. english
' add a date/time stamp to the comments header of code when you send a full code file
. no implementation in .h, but in .cpp


 Stage 1: Setting Up FreeRTOS (Basic Framework)
âœ… Verify JF_RTOS GitHub branch & PlatformIO project.
âœ… Install & configure FreeRTOS in PlatformIO.
âœ… Run a simple FreeRTOS test (minimal tasks, no functionality yet).
ðŸ”¹ Stage 2: Understanding & Using FreeRTOS Features
âœ… Learn task scheduling, priorities, and delays (vTaskDelay, vTaskDelayUntil).
âœ… Explore queues, notifications, semaphores for inter-task communication.
âœ… skip this: Simulate task execution flow using FreeRTOS-Sim on PC.
ðŸ”¹ Stage 3: Encapsulating Key Components for FreeRTOS
âœ… Structure self-made libraries for encapsulating modules.
âœ… Encapsulate & test ESP8266Audio, FastLED, WiFi, BH1750, RemoteXY individually.
âœ… Ensure each module works independently before task integration.
ðŸ”¹ Stage 4: Designing Task Structure & Scheduling
âœ… Define task responsibilities & priorities (Audio, LED, WiFi, RemoteXY).
âœ… Design communication between tasks (queues, event notifications).
âœ… Use diagram tools (Draw.io, Lucidchart, or PlantUML) to map event flow.
ðŸ”¹ Stage 5: Simulating LED & Audio Interaction
âœ… Use Processing or FastLED emulator to visualize LED effects.
âœ… Simulate audio-reactive LED behavior without running on hardware.
âœ… Adjust parameters before real hardware testing.
ðŸ”¹ Stage 6: Integration & Testing on Hardware
âœ… Merge encapsulated modules into FreeRTOS tasks.
âœ… Optimize timing, queues, and resource management.
âœ… Debug using task-aware FreeRTOS debugging tools.
ðŸ”¹ Stage 7: Expanding Functionality (Future Steps)
âœ… Add WiFi time sync & optimize power management.
âœ… Implement RemoteXY-based control.
âœ… Test future URL streaming from ESP8266Audio.


ðŸ“Œ Key Takeaways for Future FreeRTOS Usage
âœ” You need to properly isolate tasks so they don't interfere with other system functions.
âœ” Task deletion (vTaskDelete(NULL)) is critical to avoid memory leaks.
âœ” Pinned execution on Core 1 (for tasks interacting with hardware) improves stability.
âœ” Explicit this->setVolume() usage ensures task-safe object access.
âœ” Avoid mixing loop-based execution with task-based execution (e.g., audioManager.loop() was redundant in loop() while FreeRTOS tasks handled fades).