Merged JellyfishProject Code (Generated on 2025-03-13_10-57) 
===================================================== 
======================================= 
File: src\main.cpp 
======================================= 
#include <Arduino.h>
#include "config.h"
#include "JellyfishQueue.h"
#include "DynTimer.h"
#include <FastLED.h>

// LED Variables
CRGB leds[NUM_LEDS];
int brightness = 0;
bool fadeIn = true;

// Timer and Queue
JellyfishQueue eventQueue;
DynTimer* timerLED;
DynTimer* timerBlink;

// Timer Intervals
int PIN2_BLINK_ON = 222;
int PIN2_BLINK_OFF = 888;

// Fade Effect
void updateFadeEffect() {
    brightness += fadeIn ? 5 : -5;
    if (brightness >= 255 || brightness <= 0) fadeIn = !fadeIn;
    leds[0] = CRGB(brightness, brightness, brightness);
    FastLED.show();
}

// Pin 2 Blink
bool ledState = false;
void togglePin2LED() {
    ledState = !ledState;
    digitalWrite(LED_PIN, ledState);
    int nextInterval = ledState ? PIN2_BLINK_ON : PIN2_BLINK_OFF;
    eventQueue.enqueueDelayed(nextInterval, togglePin2LED);
}

void setup() {
    delay(2000);
    Serial.begin(115200);
    delay(1000);
    Serial.println("=== ESP32 Booting ===");
    delay(1000);
    pinMode(LED_PIN, OUTPUT);
    digitalWrite(LED_PIN, LOW);

    FastLED.addLeds<LED_TYPE, PIN_LED, LED_RGB_ORDER>(leds, NUM_LEDS);
    FastLED.clear();
    FastLED.show();

    // Initialize Timers
    timerLED = new DynTimer(10, updateFadeEffect, true);
    timerBlink = new DynTimer(222, togglePin2LED, true);

    // Start Timers
    timerLED->start();
    timerBlink->start();
}

void loop() {
    eventQueue.processQueue();
    timerLED->update();
    timerBlink->update();
}
 
======================================= 
Library: lib\config 
======================================= 
======================================= 
File: lib\config\config.h 
======================================= 
/**
 * Jellyfish Project - Fully Restored Codebase with Timer Hierarchy
 * Version: 2025-03-07
 */

// ========================= config.h =========================
#ifndef CONFIG_H
#define CONFIG_H

#include <Arduino.h>
#include "config_secrets.h"

// === Pin Definitions ===
#define LED_PIN         2  // Built-in LED
#define PIN_LED         4  // LED Data Out
#define PIN_I2S_DOUT   14  // I2S Data
#define PIN_I2S_BCLK   13  // I2S Bit Clock
#define PIN_I2S_LRC    15  // I2S Left/Right Clock
#define PIN_SD_CS       5  // SD Card Chip Select

// === LED Configuration ===
#define NUM_LEDS 10
#define LED_TYPE WS2812    // Define LED type
#define LED_RGB_ORDER GRB  // Define RGB order

// === Timer Intervals ===
//#define SLOW_TIMER_INTERVAL   1000  // 1 second and above
//#define FAST_TIMER_INTERVAL    250  // 100ms - 999ms
//#define ULTRAFAST_TIMER_INTERVAL 50 // Below 100ms

// === Global Variables ===
extern int audioLevel;   // Stores real-time audio level
extern bool silentMode;  // True if LEDs should remain off
extern int brightness;   // LED brightness level



#define SDA           21
#define SCL           22
#define SD_CS          5
#define SPI_MOSI      23
#define SPI_MISO      19
#define SPI_SCK       18



#endif  // CONFIG_H 
======================================= 
File: lib\config\config_secrets.h 
======================================= 
#ifndef CONFIG_SECRETS_H
#define CONFIG_SECRETS_H

#define WIFI_SSID "keijebijter"
#define WIFI_PASSWORD "Helmondia'55"

#endif // CONFIG_SECRETS_H
 
======================================= 
File: lib\config\config.cpp 
======================================= 
#include "config.h"

// === Global Variables ===
int audioLevel = 0;
bool silentMode = false;
int brightness = 150;
 
======================================= 
Library: lib\DynTimer 
======================================= 
======================================= 
File: lib\DynTimer\DynTimer.h 
======================================= 
// In DynTimer.h
#ifndef DYNTIMER_H
#define DYNTIMER_H

#include <Arduino.h>
#include <functional>
#include <vector>



class DynTimer {
public:
    enum TimerState { INACTIVE, ACTIVE, COMPLETED };

private:
    unsigned long interval;
    unsigned long nextExecution;
    bool repeating;
    bool running;
    bool debugEnabled;
    std::function<void()> callback;
    TimerState state;  // Add the state to track timer status

public:
    DynTimer(unsigned long intervalMs, std::function<void()> callback, bool repeating = true);
    void start();
    void stop();
    void pause();
    void resume();
    bool isReady();
    void reset();
    void update();
    void setInterval(unsigned long newInterval);

    TimerState getState() const;
    void setState(TimerState newState) { state = newState; }  // Setter for state
    bool isRunning() const { return running; }
    unsigned long getNextExecution() const { return nextExecution; }
    void setDebug(bool enable);
    bool getDebug() const;
};

class TimerManager {
private:
    std::vector<DynTimer*> timers;
    bool debugEnabled;

public:
    int addTimer(unsigned long interval, std::function<void()> callback, bool repeating = true);
    void removeTimer(DynTimer* timer);
    void updateAll();
    void stopAll();
    DynTimer* getTimer(int index);
    int getActiveTimerCount();
    void setDebug(bool enable);
    bool getDebug() const;
    void cleanupTimers();  // Cleanup function
};

extern TimerManager timerManager;

#endif // DYNTIMER_H
 
======================================= 
File: lib\DynTimer\DynTimer.cpp 
======================================= 
#include "DynTimer.h"
#include <Arduino.h>

// =========================================
// ========== DynTimer Implementatie =======
// =========================================

DynTimer::DynTimer(unsigned long intervalMs, std::function<void()> callback, bool repeating)
    : interval(intervalMs), callback(callback), repeating(repeating), running(false), nextExecution(0), state(INACTIVE), debugEnabled(false) {}

void DynTimer::start() {
    running = true;
    state = ACTIVE;
    nextExecution = millis() + interval;
    if (debugEnabled) {
        Serial.printf("[DEBUG] Timer started with interval %lu ms, next execution at %lu ms\n", interval, nextExecution);
    }
}

void DynTimer::stop() {
    running = false;
    state = COMPLETED;
    if (debugEnabled) {
        Serial.println("[DEBUG] Timer stopped.");
    }
}

void DynTimer::pause() {
    running = false;
    state = INACTIVE;
    if (debugEnabled) {
        Serial.println("[DEBUG] Timer paused.");
    }
}

void DynTimer::resume() {
    running = true;
    state = ACTIVE;
    nextExecution = millis() + interval;
    if (debugEnabled) {
        Serial.printf("[DEBUG] Timer resumed, next execution at %lu ms\n", nextExecution);
    }
}

bool DynTimer::isReady() {
    if (this == nullptr) return false;  // 🚨 Voorkom crash bij null pointers
    if (!running) return false;
    return millis() >= nextExecution;
}



void DynTimer::reset() {
    nextExecution = millis() + interval;
    if (debugEnabled) {
        Serial.printf("[DEBUG] Timer reset, next execution at %lu ms\n", nextExecution);
    }
}
void DynTimer::update() {
    if (isReady()) {
        unsigned long startTime = millis();
        callback();  // 🚀 Voer de callback uit

        // 🚨 Controleer of de callback te lang duurt
        if (millis() - startTime > 50) {
            Serial.println("[WARNING] Timer callback duurde te lang!");
            delay(1);  // ESP de kans geven om andere taken uit te voeren
        }

        if (repeating) {
            reset();
            state = ACTIVE;
        } else {
            stop();
            state = COMPLETED;
        }
    }
}



void DynTimer::setInterval(unsigned long newInterval) {
    interval = newInterval;
    reset();
    if (debugEnabled) {
        Serial.printf("[DEBUG] Timer interval updated to %lu ms\n", newInterval);
    }
}

DynTimer::TimerState DynTimer::getState() const {
    return state;
}


void DynTimer::setDebug(bool enable) {
    debugEnabled = enable;
}

bool DynTimer::getDebug() const {
    return debugEnabled;
}

// =========================================
// ========= TimerManager Implementatie =====
// =========================================

int TimerManager::addTimer(unsigned long interval, std::function<void()> callback, bool repeating) {
    DynTimer* timer = new DynTimer(interval, callback, repeating);
    timers.push_back(timer);
    timer->start();
    return timers.size() - 1;
}

void TimerManager::removeTimer(DynTimer* timer) {
    for (auto it = timers.begin(); it != timers.end(); it++) {
        if (*it == timer) {
            delete *it;
            timers.erase(it);
            Serial.println("[DEBUG] Timer removed.");
            break;
        }
    }
}

void TimerManager::cleanupTimers() {
    for (auto it = timers.begin(); it != timers.end(); ) {
        if (*it == nullptr || (*it)->getState() == DynTimer::COMPLETED) {
            delete *it;
            it = timers.erase(it);  // ✅ Correcte manier om verwijdering te verwerken
        } else {
            ++it;
        }
    }
}



void TimerManager::updateAll() {
    unsigned long startTime = millis();  // ⏳ Tijd bijhouden
    int processed = 0;  // Teller om te beperken hoeveel timers we verwerken

    for (auto it = timers.begin(); it != timers.end(); ) {
        if (*it == nullptr) {  
            it = timers.erase(it);
            continue;
        }

        if ((*it)->isReady()) {
            Serial.printf("[DEBUG] Verwerken timer op index: %ld\n", std::distance(timers.begin(), it));
            
            (*it)->update();

            // 🚨 Als de timer zichzelf verwijdert, moet de iterator opnieuw gezet worden
            if (timers.empty()) break;  // Stop als er geen timers meer zijn
            it = timers.begin();  // Reset iterator om geheugenfouten te voorkomen
            continue;
        }

        ++it;

        // 🚨 Stop als we te veel timers verwerken in één keer
        if (processed > 10 || millis() - startTime > 50) {
            Serial.println("[WARNING] TimerManager::updateAll() is te zwaar, pauzeren...");
            break;
        }
    }
}




void TimerManager::stopAll() {
    for (auto& timer : timers) {
        delete timer;
    }
    timers.clear();
    Serial.println("[DEBUG] All timers stopped and cleared.");
}

DynTimer* TimerManager::getTimer(int index) {
    if (index >= 0 && index < timers.size()) {
        return timers[index];
    }
    return nullptr;
}

int TimerManager::getActiveTimerCount() {
    return timers.size();
}

void TimerManager::setDebug(bool enable) {
    debugEnabled = enable;
}

bool TimerManager::getDebug() const {
    return debugEnabled;
}


 
======================================= 
File: lib\DynTimer\keywords.txt 
======================================= 
DynTimer     KEYWORD1
start        KEYWORD2
isReady      KEYWORD2
reset        KEYWORD2
pause        KEYWORD2
resume       KEYWORD2
addTimer     KEYWORD2
update       KEYWORD2
isRunning    FUNCTION
 
======================================= 
Library: lib\JellyfishLEDs 
======================================= 
======================================= 
File: lib\JellyfishLEDs\JellyfishLEDs.h 
======================================= 
#ifndef JELLYFISHLEDS_H
#define JELLYFISHLEDS_H

#include <FastLED.h>
#include "config.h"

class JellyfishLEDs {
public:
    CRGB leds[NUM_LEDS];  // ✅ Declare LED array

    JellyfishLEDs();
    void setSingleColor(int index, CRGB color);
    void updateLEDs();
};

#endif // JELLYFISHLEDS_H
 
======================================= 
File: lib\JellyfishLEDs\JellyfishLEDs.cpp 
======================================= 
#include "JellyfishLEDs.h"

JellyfishLEDs::JellyfishLEDs() {
    FastLED.addLeds<LED_TYPE, PIN_LED, LED_RGB_ORDER>(leds, NUM_LEDS);
    FastLED.clear();
    FastLED.show();
}

void JellyfishLEDs::setSingleColor(int index, CRGB color) {
    if (index >= 0 && index < NUM_LEDS) {
        leds[index] = color;
        updateLEDs();
    }
}

void JellyfishLEDs::updateLEDs() {
    FastLED.show();  // ✅ Ensures LED state is updated
}
 
======================================= 
File: lib\JellyfishLEDs\keywords.txt 
======================================= 
 
// Updated: 2025-03-11 07:30:00 
JellyfishLEDs   KEYWORD1 
setSingleColor  KEYWORD2 
updateLEDs      KEYWORD2 
clearLEDs       KEYWORD2 
// END OF GPT UPDATE FILE 
 
======================================= 
Library: lib\JellyfishQueue 
======================================= 
======================================= 
File: lib\JellyfishQueue\JellyfishQueue.h 
======================================= 
#ifndef JELLYFISHQUEUE_H
#define JELLYFISHQUEUE_H

#include <queue>
#include <functional>
#include <Arduino.h>

class JellyfishQueue {
private:
    std::queue<std::function<void()>> taskQueue;
    std::vector<std::pair<unsigned long, std::function<void()>>> delayedTasks;
    bool debugQueue;

public:
    JellyfishQueue();
    void enqueue(std::function<void()> task);
    void enqueueDelayed(unsigned long delayMs, std::function<void()> task);
    void processQueue();
};

#endif // JELLYFISHQUEUE_H
 
======================================= 
File: lib\JellyfishQueue\JellyfishQueue.cpp 
======================================= 
#include "JellyfishQueue.h"

JellyfishQueue::JellyfishQueue() : debugQueue(false) {}

void JellyfishQueue::enqueue(std::function<void()> task) {
    taskQueue.push(task);
}

void JellyfishQueue::enqueueDelayed(unsigned long delayMs, std::function<void()> task) {
    delayedTasks.push_back({millis() + delayMs, task});
}

void JellyfishQueue::processQueue() {
    // Process immediate tasks
    while (!taskQueue.empty()) {
        auto task = taskQueue.front();
        taskQueue.pop();
        task();
    }

    // Process delayed tasks
    unsigned long now = millis();
    auto it = delayedTasks.begin();
    while (it != delayedTasks.end()) {
        if (now >= it->first) {
            it->second(); // Execute the delayed task
            it = delayedTasks.erase(it);
        } else {
            ++it;
        }
    }
}
 
======================================= 
File: lib\JellyfishQueue\keywords.txt 
======================================= 
# JellyfishQueue Keywords
# Version: 2025-03-12

JellyfishQueue  KEYWORD1
enqueue         KEYWORD2
dequeue         KEYWORD2
isEmpty         KEYWORD2
clear           KEYWORD2
processQueue    KEYWORD2
setDebug        KEYWORD2
getDebug        KEYWORD2
 
WARNING: lib\JellyfishAudio not found Skipping... 
======================================= 
Library: lib\WiFiManager 
======================================= 
======================================= 
File: lib\WiFiManager\WiFiManager.h 
======================================= 
#ifndef WIFI_MANAGER_H
#define WIFI_MANAGER_H

#include <WiFi.h>  // Ensure inclusion of WiFi functions
#include "config.h"

/**
 * WiFiManager - Handles WiFi connection, disconnection, and reconnection.
 * Version: 2025-03-12
 */

class WiFiManager {
private:
    bool debugWiFi;  // Debug flag

public:
    WiFiManager();
    void begin();       // Connect to WiFi at startup
    void reconnect();   // Reconnects if disconnected
    void disconnect();  // Forces WiFi disconnection
    bool isConnected(); // Returns true if connected
    void setDebug(bool enable);
    bool getDebug() const;
};

#endif // WIFI_MANAGER_H
 
======================================= 
File: lib\WiFiManager\WiFiManager.cpp 
======================================= 
#include "WiFiManager.h"
#include <Arduino.h>

/**
 * WiFiManager Implementation
 * Version: 2025-03-12
 */

WiFiManager::WiFiManager() : debugWiFi(true) {}  // Default: Debug enabled

void WiFiManager::begin() {
    if (debugWiFi) Serial.printf("[WiFi] Connecting to %s\n", WIFI_SSID);

    WiFi.disconnect(true);
    WiFi.mode(WIFI_STA);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

    unsigned long startAttemptTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
        delay(500);
        Serial.print(".");
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\n✅ [WiFi] CONNECTED!");
        Serial.print("[WiFi] IP Address: ");
        Serial.println(WiFi.localIP());
    } else {
        Serial.println("\n❌ [WiFi] Connection FAILED.");
    }
}

void WiFiManager::reconnect() {
    if (debugWiFi) Serial.println("[WiFi] Reconnecting...");
    WiFi.disconnect();
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
}

void WiFiManager::disconnect() {
    if (debugWiFi) Serial.println("[WiFi] Disconnecting...");
    WiFi.disconnect(true);
}

bool WiFiManager::isConnected() {
    return WiFi.status() == WL_CONNECTED;
}

void WiFiManager::setDebug(bool enable) {
    debugWiFi = enable;
    Serial.printf("[WiFi] Debug mode %s.\n", debugWiFi ? "enabled" : "disabled");
}

bool WiFiManager::getDebug() const {
    return debugWiFi;
}
 
======================================= 
File: lib\WiFiManager\keywords.txt 
======================================= 
# WiFiManager Keywords
# Version: 2025-03-12

WiFiManager  KEYWORD1
begin        KEYWORD2
reconnect    KEYWORD2
disconnect   KEYWORD2
isConnected  KEYWORD2
setDebug     KEYWORD2
getDebug     KEYWORD2
 
======================================= 
Library: lib\HighSpeedTimer 
======================================= 
======================================= 
File: lib\HighSpeedTimer\HighSpeedTimer.h 
======================================= 
#ifndef HIGHSPEEDTIMER_H
#define HIGHSPEEDTIMER_H

#include <Arduino.h>

#define MAX_HSTIMERS 5  // Up to 5 simultaneous high-speed timers

class HighSpeedTimer {
private:
    struct TimerTask {
        unsigned long interval;
        unsigned long nextRun;
        void (*callback)();
        bool active;
    };

    TimerTask tasks[MAX_HSTIMERS];

public:
    HighSpeedTimer();
    void addTask(unsigned long interval, void (*callback)());
    void update();
};

#endif  // HIGHSPEEDTIMER_H
 
======================================= 
File: lib\HighSpeedTimer\MidSpeedTimer.h 
======================================= 
#ifndef MIDSPEEDTIMER_H
#define MIDSPEEDTIMER_H

#include <Arduino.h>

#define MAX_MSTIMERS 3  // Up to 3 simultaneous mid-speed timers

class MidSpeedTimer {
private:
    struct TimerTask {
        unsigned long interval;
        unsigned long nextRun;
        void (*callback)();
        bool active;
    };

    TimerTask tasks[MAX_MSTIMERS];

public:
    MidSpeedTimer();
    void addTask(unsigned long interval, void (*callback)());
    void update();
};

#endif  // MIDSPEEDTIMER_H
 
======================================= 
File: lib\HighSpeedTimer\HighSpeedTimer.cpp 
======================================= 
#include "HighSpeedTimer.h"

HighSpeedTimer::HighSpeedTimer() {
    for (int i = 0; i < MAX_HSTIMERS; i++) {
        tasks[i].active = false;
    }
}

void HighSpeedTimer::addTask(unsigned long interval, void (*callback)()) {
    for (int i = 0; i < MAX_HSTIMERS; i++) {
        if (!tasks[i].active) {
            tasks[i].interval = interval;
            tasks[i].nextRun = millis() + interval;
            tasks[i].callback = callback;
            tasks[i].active = true;
            return;
        }
    }
}

void HighSpeedTimer::update() {
    unsigned long now = millis();
    for (int i = 0; i < MAX_HSTIMERS; i++) {
        if (tasks[i].active && now >= tasks[i].nextRun) {
            tasks[i].callback();
            tasks[i].nextRun = now + tasks[i].interval;
        }
    }
}
 
======================================= 
File: lib\HighSpeedTimer\MidSpeedTimer.cpp 
======================================= 
#include "MidSpeedTimer.h"

MidSpeedTimer::MidSpeedTimer() {
    for (int i = 0; i < MAX_MSTIMERS; i++) {
        tasks[i].active = false;
    }
}

void MidSpeedTimer::addTask(unsigned long interval, void (*callback)()) {
    for (int i = 0; i < MAX_MSTIMERS; i++) {
        if (!tasks[i].active) {
            tasks[i].interval = interval;
            tasks[i].nextRun = millis() + interval;
            tasks[i].callback = callback;
            tasks[i].active = true;
            return;
        }
    }
}

void MidSpeedTimer::update() {
    unsigned long now = millis();
    for (int i = 0; i < MAX_MSTIMERS; i++) {
        if (tasks[i].active && now >= tasks[i].nextRun) {
            tasks[i].callback();
            tasks[i].nextRun = now + tasks[i].interval;
        }
    }
}
 
======================================= 
File: lib\HighSpeedTimer\keywords.txt 
======================================= 
# HighSpeedTimer Keywords
HighSpeedTimer    KEYWORD1
addTask           KEYWORD2
update            KEYWORD2

# MidSpeedTimer Keywords
MidSpeedTimer     KEYWORD1
addTask           KEYWORD2
update            KEYWORD2
 
