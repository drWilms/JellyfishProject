# Jellyfish Project - Werkopdracht: Implementatievolgorde Core + Uitbreidingen

## 1. Doel
Het stap-voor-stap implementeren van een **stabiele Jellyfish Core** als basis voor uitbreidingen, met een gestructureerde strategie voor ontwikkeling, testen en integratie van nieuwe functionaliteiten.

---

## 2. Stap 1: Jellyfish Core Implementeren (Fundament)

### **ðŸ”· Wat wordt geÃ¯mplementeerd?**
âœ… **FreeRTOS Kernel** (Task Management, Scheduler, Prioriteiten)  
âœ… **Debug Task** (Mode 0-4: Geen, Simpel, Uitgebreid, SD, Beide)  
âœ… **FastLED Basis** (Ã‰Ã©n test-LED voor timingcontrole)  
âœ… **Audio Input & Basisverwerking** (Geluidssignaal uitlezen, geen effecten)  
âœ… **TimeManager** (RTC & WiFi Tijd Sync, zonder extra WiFi-verkeer)  
âœ… **SDManager** (Alleen logging, geen bestandsbeheer)  
âœ… **Queue & Timer Systemen** (Basisfunctionaliteit, geen complexe processen)  

### **ðŸ”¹ Validatie vÃ³Ã³r verdergaan**
âœ” Debug Task werkt betrouwbaar.  
âœ” Basis FastLED-functionaliteit geeft stabiele output.  
âœ” Audio-invoer geeft consistente metingen.  
âœ” FreeRTOS-timers werken correct.  

---

## 3. Stap 2: Testomgeving inrichten (Feature Development)

### **ðŸ”· Acties**
1. **GitHub Branch Structuur Activeren**  
   - `core` branch maken als basis.  
   - Nieuwe feature-branches voor elke uitbreiding.  
2. **Testcode opzetten binnen Core**  
   - Losse taken schrijven die uitbreidingen simuleren.  
   - Debug-modi gebruiken om functionaliteit live te monitoren.  

### **ðŸ”¹ Validatie vÃ³Ã³r verdergaan**
âœ” GitHub branches correct ingesteld.  
âœ” Basis-functionaliteiten gescheiden van uitbreidingen.  

---

## 4. Stap 3: Eerste Uitbreidingen Toevoegen (Losse Features)

### **ðŸ”¶ 3.1 Audio-Reactieve LEDs**
- FreeRTOS-taak verwerkt audio en update `audioLevel` variabele.  
- LED-animaties in de loop() gebaseerd op deze waarde.  

### **ðŸ”¶ 3.2 Basis Lichtshow Mechanisme**
- Dynamisch beheer van LED-effecten via een queue.  
- Test met enkele basis-lichtpatronen.  

### **ðŸ”¶ 3.3 Geavanceerde Debug Logging**
- Debug Task uitbreiden met CPU- en geheugengebruik-rapportage.  

### **ðŸ”¶ 3.4 WiFi Functie Minimaliseren**
- Tijd synchronisatie 1x per dag, geen continue verbinding.  

### **ðŸ”¹ Validatie vÃ³Ã³r verdergaan**
âœ” Audio-reactieve LEDs reageren correct.  
âœ” Lichtshow-systeem werkt zonder timingproblemen.  
âœ” WiFi heeft geen impact op FreeRTOS prestaties.  

---

## 5. Stap 4: Complexe Uitbreidingen (Geavanceerde Modules)

### **ðŸ”· Wat wordt ontwikkeld?**
ðŸ”¹ **Volledige Lichtshow Animatie Engine** (Ingebouwd queue-systeem voor effecten)  
ðŸ”¹ **MP3-bestandsbeheer op SD** (Afspelen en beheren van tracks)  
ðŸ”¹ **RemoteXY/WebInterface** (Optioneel, voor real-time bediening)  
ðŸ”¹ **FFT/Frequentie-analyse voor preciezere audio-reacties**  

### **ðŸ”¹ Validatie vÃ³Ã³r verdergaan**
âœ” Alle uitbreidingen werken **apart** zonder de Core te verstoren.  

---

## 6. Stap 5: Eindvalidatie en Optimalisatie

### **ðŸ”· Acties**
- Geheugengebruik optimaliseren.  
- Testen met verschillende debug-modi (0-4).  
- Code cleanup en documentatie.  

---

## 7. Conclusie: Implementatievolgorde

âœ” **Stap 1: Jellyfish Core bouwen** (FreeRTOS, Debug Task, Basis FastLED, Audio Input, SDManager, TimeManager).  
âœ” **Stap 2: Testomgeving opzetten & GitHub branches instellen.**  
âœ” **Stap 3: Losse uitbreidingen individueel testen en valideren.**  
âœ” **Stap 4: Complexere modules gefaseerd toevoegen.**  
âœ” **Stap 5: Eindvalidatie & optimalisatie.**  

