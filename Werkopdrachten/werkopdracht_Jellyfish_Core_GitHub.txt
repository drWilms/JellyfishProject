# Jellyfish Project - Werkopdracht Core + Uitbreidingen + GitHub Strategie

## 1. Doel
Het implementeren van een **stabiele Jellyfish Core** en een strategie voor **modulaire uitbreidingen**, waarbij GitHub wordt gebruikt voor **veilig versiebeheer en gescheiden ontwikkeling**.

---

## 2. Jellyfish Core: Minimale Stabiele Basis

### **ðŸ”· Functies die altijd in de Core zitten**
âœ… **FreeRTOS Kernel** (Task Management, Scheduler, Prioriteiten)  
âœ… **Debug Task** (Mode 0-4: Geen, Simpel, Uitgebreid, SD, Beide)  
âœ… **FastLED Basisimplementatie** (Ã‰Ã©n test-LED voor timing)  
âœ… **Audio Input & Basisverwerking** (Geluidssignaal uitlezen, geen effecten)  
âœ… **TimeManager** (RTC & WiFi-tijd sync, maar geen extra WiFi-verkeer)  
âœ… **SDManager** (Alleen logging, geen uitgebreide bestandsbewerkingen)  
âœ… **Queue & Timer Systemen** (Basisfunctionaliteit, geen uitgebreide processen)  

ðŸ’¡ **Waarom deze Core?**  
âœ” **Testomgeving** â†’ Nieuwe functionaliteiten worden **hier geÃ¯soleerd getest**.  
âœ” **Minimale impact** â†’ Geen lichtshows of zware audio-processing, zodat debugging eenvoudig blijft.  
âœ” **Geen onnodige complexiteit** â†’ Behoudt een **stabiel referentiepunt**.  

---

## 3. Uitbreidingen: Modulaire Opbouw

### **ðŸ”¶ Hoe uitbreidingen worden ontwikkeld en getest**
- **Stap 1:** Nieuwe feature wordt **eerst in Core ontwikkeld als losse module**  
- **Stap 2:** Feature wordt **in een aparte GitHub-branch ontwikkeld**  
- **Stap 3:** Validatie in de **Core-testomgeving**  
- **Stap 4:** Pas na succesvolle validatie wordt de code **naar `main` gemerged**  

ðŸ’¡ **Dit voorkomt dat nieuwe toevoegingen het systeem instabiel maken.**  

### **ðŸ”¶ Overzicht van geplande uitbreidingen**
| Functionaliteit | Testen in Core? | Later toevoegen aan Main? |
|----------------|----------------|----------------------------|
| **Nieuwe LED-effecten** | Ja | Na validatie |
| **Audio-Reactieve LEDs** | Ja | Na testen van stabiliteit |
| **WiFi RemoteXY** | Ja | Na debugging |
| **MP3-bestandsbeheer op SD** | Ja | Na validatie in SDManager |
| **Geavanceerde lichtshows** | Ja | Na resource-optimalisatie |

---

## 4. GitHub Strategie: Hoe Werken met Branches

### **ðŸ”¹ Wanneer een Nieuwe Branch?**
| Actie | Welke Branch? |
|-------|--------------|
| âœ… **Stabiele Core-versie bijwerken** | **`main` branch** |
| âœ… **Nieuwe uitbreidingen ontwikkelen** | **Eigen `feature` branch** |
| âœ… **Debugging en validatie** | **Testbranch vÃ³Ã³r merge naar `main`** |
| âœ… **Grote herstructureringen** | **Nieuwe `dev` branch** |

### **ðŸ”¹ Praktisch Werken met GitHub**
1. **Maak een nieuwe branch voor een uitbreiding:**  
   ```sh
   git checkout -b feature-audiofeedback
   ```
2. **Werk alleen aan deze specifieke functionaliteit.**  
3. **Test en debug alles in Core voordat je mergen overweegt.**  
4. **Als de code stabiel is, merge naar `main`:**  
   ```sh
   git checkout main
   git merge feature-audiofeedback
   git push origin main
   ```

### **ðŸ”¹ Wanneer een Commit, Wanneer een Merge?**
| Actie | Wat doe je? |
|-------|------------|
| **Kleine bugfix of optimalisatie** | Direct commit in de huidige branch |
| **Nieuwe uitbreiding (LED effect, WiFi-optie, SD functionaliteit)** | Nieuwe feature-branch |
| **Grote herstructurering (Core veranderen, timers herschrijven)** | Dev branch |
| **Testcode die mogelijk onstabiel is** | Testbranch maken |

ðŸ’¡ **Pas mergen naar `main` als de code 100% stabiel en getest is.**  

---

## 5. Hoe Begin Je Nu?

1. **Bevries de huidige stabiele code in de `main` branch.**  
2. **Maak een `core` branch als referentiepunt voor uitbreidingen.**  
3. **Voor elke nieuwe feature: Maak een aparte feature-branch.**  
4. **Test nieuwe features eerst in de Core-omgeving.**  
5. **Na validatie: Merge de feature-branch terug in `main`.**  

---

## 6. Verwachte Voordelen
âœ” **Jellyfish Core blijft altijd stabiel en getest.**  
âœ” **Nieuwe functionaliteiten worden gecontroleerd ontwikkeld en geÃ¯mplementeerd.**  
âœ” **GitHub voorkomt codeverlies en maakt rollback eenvoudig.**  
âœ” **Problemen worden vroeg gedetecteerd zonder impact op de hoofdversie.**  

