Merged JellyfishProject Code (Generated on 2025-03-12_17-24) 
===================================================== 
======================================= 
File: src\main.cpp 
======================================= 
#include "DynTimer.h"
#include "JellyfishQueue.h"
#include "WiFiManager.h"
#include "config.h"
#include <vector>

/**
 * ======================== Demo5 - Fully Timed Queue-Based Printing ========================
 *
 * - WiFi connects at startup, **auto-reconnects every 6 minutes**.
 * - WiFi **disconnects every 2 minutes**, reconnects **after 23 seconds**.
 * - **LED on PIN 2 blinks continuously** (20ms OFF, 17ms ON).
 * - **Each individual print character is separately queued with a timed task**.
 * - **DynTimer schedules every event separately**.
 * - **Follows original Demo4 print cycle exactly, but with granular task-based execution.**
 */

JellyfishQueue eventQueue;
TimerManager timerManager;
WiFiManager wifiManager;

// LED Blink Control
bool ledState = false;
void toggleLED();
int ledBlinkTimerNr;

// Function prototypes
void queueMainPrintSequence();
void queueSymbolPrintSequence();
void enqueueCharacter(char c);
void forceWiFiDisconnect();
void reconnectWiFi();

// WiFi Control Timers
int forceDisconnectTimerNr;
int wifiReconnectTimerNr;

// Print Cycle Variables (kept global for individual task scheduling)
char mainCycleChars[] = {':', ';', ':', ';', '.', ','};
int mainCycleCounts[] = {10, 9, 8, 7, 10, 7};
int mainCycleIndex = 0;
int mainCycleRepeat = 7;

char symbolCycleChars[] = {'*', '#', '*'};
int symbolCycleCounts[] = {5, 4, 3};
int symbolCycleIndex = 0;
int symbolCycleRepeat = 13;

/**
 * Queues individual characters at scheduled intervals.
 */
void enqueueCharacter(char c) {
    eventQueue.enqueue(std::string(1, c));
}

/**
 * Schedules an entire sequence of characters in the main print cycle.
 */
void queueMainPrintSequence() {
    if (mainCycleRepeat == 0) return;

    char currentChar = mainCycleChars[mainCycleIndex];
    int repeatCount = mainCycleCounts[mainCycleIndex];

    for (int i = 0; i < repeatCount; i++) {
        timerManager.addTimer(i * 100, [currentChar]() { enqueueCharacter(currentChar); }, false);
    }

    mainCycleIndex++;
    if (mainCycleIndex >= 6) {
        mainCycleIndex = 0;
        mainCycleRepeat--;
    }
}

void queueSymbolPrintSequence() {
    if (symbolCycleRepeat == 0) return;

    char currentChar = symbolCycleChars[symbolCycleIndex];
    int repeatCount = symbolCycleCounts[symbolCycleIndex];

    for (int i = 0; i < repeatCount; i++) {
        timerManager.addTimer(i * 500, [currentChar]() { enqueueCharacter(currentChar); }, false);
    }

    symbolCycleIndex++;
    if (symbolCycleIndex >= 3) {
        symbolCycleIndex = 0;
        symbolCycleRepeat--;
    }
}

/**
 * Toggles the LED on PIN 2 with dynamic timing.
 */
void toggleLED() {
    ledState = !ledState;
    digitalWrite(LED_PIN, ledState);

    DynTimer* ledTimer = timerManager.getTimer(ledBlinkTimerNr);
    if (ledTimer) {
        ledTimer->setInterval(ledState ? 17 : 20);
    }
}

void setup() {
    Serial.begin(115200);
    delay(1000);
    Serial.println("=== Demo5 - Queue Everything Start ===");
    delay(4000);
    pinMode(LED_PIN, OUTPUT);
    digitalWrite(LED_PIN, LOW);

    wifiManager.begin();  // Connect to WiFi at startup
    wifiManager.setDebug(false);

    // **Queue-based structured printing (original decreasing pattern)**
    timerManager.addTimer(1000, queueMainPrintSequence, true);
    timerManager.addTimer(45000, queueSymbolPrintSequence, true);

    // Queue Processing Task (pulls and prints characters)
    timerManager.addTimer(10, [] { eventQueue.processQueue(); }, true);
    timerManager.setDebug(false);
    // LED Blink Task
    ledBlinkTimerNr = timerManager.addTimer(20, toggleLED, true);
}

void loop() {
    timerManager.updateAll();
    static unsigned long lastDebug = 0;
    if (millis() - lastDebug >= 5000) { // Print every 5 seconds
      //  Serial.printf("[DEBUG] Queue Size: %d\n", eventQueue.size());
        lastDebug = millis();
    }
}
 
======================================= 
Library: lib\config 
======================================= 
======================================= 
File: lib\config\config.h 
======================================= 
/**
 * Jellyfish Project - Fully Restored Codebase with Timer Hierarchy
 * Version: 2025-03-07
 */

// ========================= config.h =========================
#ifndef CONFIG_H
#define CONFIG_H

#include <Arduino.h>
#include "config_secrets.h"

// === Pin Definitions ===
#define LED_PIN         2  // Built-in LED
#define PIN_LED         4  // LED Data Out
#define PIN_I2S_DOUT   14  // I2S Data
#define PIN_I2S_BCLK   13  // I2S Bit Clock
#define PIN_I2S_LRC    15  // I2S Left/Right Clock
#define PIN_SD_CS       5  // SD Card Chip Select

// === LED Configuration ===
#define NUM_LEDS 10
#define LED_TYPE WS2812    // Define LED type
#define LED_RGB_ORDER GRB  // Define RGB order

// === Timer Intervals ===
//#define SLOW_TIMER_INTERVAL   1000  // 1 second and above
//#define FAST_TIMER_INTERVAL    250  // 100ms - 999ms
//#define ULTRAFAST_TIMER_INTERVAL 50 // Below 100ms

// === Global Variables ===
extern int audioLevel;   // Stores real-time audio level
extern bool silentMode;  // True if LEDs should remain off
extern int brightness;   // LED brightness level



#define SDA           21
#define SCL           22
#define SD_CS          5
#define SPI_MOSI      23
#define SPI_MISO      19
#define SPI_SCK       18



#endif  // CONFIG_H 
======================================= 
File: lib\config\config_secrets.h 
======================================= 
#ifndef CONFIG_SECRETS_H
#define CONFIG_SECRETS_H

#define WIFI_SSID "keijebijter"
#define WIFI_PASSWORD "Helmondia'55"

#endif // CONFIG_SECRETS_H
 
======================================= 
File: lib\config\config.cpp 
======================================= 
#include "config.h"

// === Global Variables ===
int audioLevel = 0;
bool silentMode = false;
int brightness = 150;
 
======================================= 
Library: lib\DynTimer 
======================================= 
======================================= 
File: lib\DynTimer\DynTimer.h 
======================================= 
#ifndef DYNTIMER_H
#define DYNTIMER_H

#include <Arduino.h>
#include <functional>
#include <vector>

class DynTimer {
private:
    unsigned long interval;
    unsigned long nextExecution;
    bool repeating;
    bool running;
    bool debugEnabled;
    std::function<void()> callback;

public:
    DynTimer(unsigned long intervalMs, std::function<void()> callback, bool repeating = true);
    void start();
    void stop();
    void pause();
    void resume();
    bool isReady();
    void reset();
    void update();
    void setInterval(unsigned long newInterval); 

    bool isRunning() const { return running; }
    unsigned long getNextExecution() const { return nextExecution; }
    void setDebug(bool enable);
    bool getDebug() const;
};

class TimerManager {
    private:
        std::vector<DynTimer*> timers;
        bool debugEnabled;
    
    public:
        int addTimer(unsigned long interval, std::function<void()> callback, bool repeating = true);
        void removeTimer(int index);
        void updateAll();
        void stopAll();
        DynTimer* getTimer(int index);  
        int getActiveTimerCount(); 
        void setDebug(bool enable);
        bool getDebug() const;
    };
    

#endif // DYNTIMER_H
 
======================================= 
File: lib\DynTimer\DynTimer.cpp 
======================================= 
#include "DynTimer.h"
#include <Arduino.h>

/**
 * DynTimer Implementation
 * Version: 2025-03-12
 */

DynTimer::DynTimer(unsigned long intervalMs, std::function<void()> callback, bool repeating)
    : interval(intervalMs), callback(callback), repeating(repeating), running(false), nextExecution(0), debugEnabled(false) {}

void DynTimer::start() {
    running = true;
    nextExecution = millis() + interval;
    if (debugEnabled) {
        Serial.printf("[DEBUG] Timer started with interval %lu ms, next execution at %lu ms\n", interval, nextExecution);
    }
}

void DynTimer::stop() {
    running = false;
    if (debugEnabled) {
        Serial.println("[DEBUG] Timer stopped.");
    }
}

void DynTimer::pause() {
    running = false;
    if (debugEnabled) {
        Serial.println("[DEBUG] Timer paused.");
    }
}

void DynTimer::resume() {
    running = true;
    nextExecution = millis() + interval;
    if (debugEnabled) {
        Serial.printf("[DEBUG] Timer resumed, next execution at %lu ms\n", nextExecution);
    }
}

bool DynTimer::isReady() {
    if (!running) return false;
    if (this == nullptr) {
        Serial.println("[ERROR] DynTimer::isReady() - Null Pointer Detected!");
        return false;
    }
    return millis() >= nextExecution;
}

void DynTimer::reset() {
    nextExecution = millis() + interval;
    if (debugEnabled) {
        Serial.printf("[DEBUG] Timer reset, next execution at %lu ms\n", nextExecution);
    }
}

void DynTimer::setInterval(unsigned long newInterval) {
    interval = newInterval;
    reset();
    if (debugEnabled) {
        Serial.printf("[DEBUG] Timer interval updated to %lu ms\n", newInterval);
    }
}

void DynTimer::update() {
    if (isReady()) {
        if (debugEnabled) {
            Serial.printf("[DEBUG] Executing timer callback at %lu ms\n", millis());
        }
        callback();
        if (repeating) {
            reset();
        } else {
            stop();
        }
    }
}

void DynTimer::setDebug(bool enable) {
    debugEnabled = enable;
    Serial.printf("[DynTimer] Debug mode %s\n", debugEnabled ? "enabled" : "disabled");
}

bool DynTimer::getDebug() const {
    return debugEnabled;
}

// ======================== TimerManager Implementation ========================
int TimerManager::addTimer(unsigned long interval, std::function<void()> callback, bool repeating) {
    DynTimer* timer = new DynTimer(interval, callback, repeating);
    timers.push_back(timer);
    timer->start();
    int index = timers.size() - 1;
    
    Serial.printf("[DEBUG] Timer Added. Total Timers: %d (Active: %d)\n", timers.size(), getActiveTimerCount());
    
    return index;
}

int TimerManager::getActiveTimerCount() {
    int count = 0;
    for (auto& timer : timers) {
        if (timer->isRunning()) {
            count++;
        }
    }
    return count;
}


void TimerManager::removeTimer(int index) {
    if (index >= 0 && index < timers.size()) {
        if (timers[index] != nullptr) {
            delete timers[index];
            timers[index] = nullptr;  // ✅ Prevent invalid access
            Serial.printf("[DEBUG] Timer #%d removed.\n", index);
        }
        timers.erase(timers.begin() + index);
    }
}

void TimerManager::updateAll() {
    static bool updateRunning = false;
    if (updateRunning) {
        Serial.println("[WARNING] Recursive updateAll() call detected!");
        return;
    }
    
    updateRunning = true;  // Mark function as running
    int activeTimers = 0;
    
    std::vector<DynTimer*> tempTimers = timers; // Copy the list to prevent modification issues

    for (size_t i = 0; i < tempTimers.size(); i++) {
        DynTimer* timer = tempTimers[i];

        if (timer == nullptr) {
            Serial.printf("[ERROR] NULL Timer at index %d!\n", i);
            continue;
        }

        if (timer->isRunning()) {
            activeTimers++;
            timer->update();
        }
    }

    updateRunning = false;  // Mark function as finished
    if (debugEnabled) {
    Serial.printf("[DEBUG] Active Timers: %d\n", activeTimers);}
}


void TimerManager::stopAll() {
    for (auto& timer : timers) {
        delete timer;
    }
    timers.clear();
    Serial.println("[DEBUG] All timers stopped and cleared.");
}

DynTimer* TimerManager::getTimer(int index) {
    if (index >= 0 && index < timers.size()) {
        return timers[index];
    }
    Serial.printf("[ERROR] getTimer() called with invalid index: %d\n", index);
    return nullptr;
}


void TimerManager::setDebug(bool enable) {
    debugEnabled = enable;
    Serial.printf("[DynTimer] Debug mode %s\n", debugEnabled ? "enabled" : "disabled");
}

bool TimerManager::getDebug() const {
    return debugEnabled;
}
 
======================================= 
File: lib\DynTimer\keywords.txt 
======================================= 
DynTimer     KEYWORD1
start        KEYWORD2
isReady      KEYWORD2
reset        KEYWORD2
pause        KEYWORD2
resume       KEYWORD2
addTimer     KEYWORD2
update       KEYWORD2
isRunning    FUNCTION
 
======================================= 
Library: lib\JellyfishLEDs 
======================================= 
======================================= 
File: lib\JellyfishLEDs\JellyfishLEDs.h 
======================================= 
 
// Updated: 2025-03-11 07:30:00 
#ifndef JELLYFISHLEDS_H 
#define JELLYFISHLEDS_H 
#include <FastLED.h> 
#include "config.h" 
class JellyfishLEDs { 
private: 
CRGB leds[NUM_LEDS]; 
public: 
JellyfishLEDs(); 
void init(); 
void setSingleColor(int index, CRGB color); 
void runRainbow(); 
}; 
#endif // JELLYFISHLEDS_H 
 
======================================= 
File: lib\JellyfishLEDs\JellyfishLEDs.cpp 
======================================= 
 
// Updated: 2025-03-11 07:30:00 
#include "JellyfishLEDs.h" 
JellyfishLEDs::JellyfishLEDs() { 
FastLED.addLeds<LED_TYPE, LED_PIN, LED_RGB_ORDER>(leds, NUM_LEDS); 
FastLED.clear(); 
} 
void JellyfishLEDs::init() { 
FastLED.clear(); 
FastLED.show(); 
} 
void JellyfishLEDs::setSingleColor(int index, CRGB color) { 
if (index >= 0 && index < NUM_LEDS) { 
leds[index] = color; 
FastLED.show(); 
} 
} 
void JellyfishLEDs::runRainbow() { 
static uint8_t hue = 0; 
for (int i = 0; i < NUM_LEDS; i++) { 
leds[i] = CHSV(hue + (i * 10), 255, 255); 
} 
FastLED.show(); 
hue += 5; 
} 
 
======================================= 
File: lib\JellyfishLEDs\keywords.txt 
======================================= 
 
// Updated: 2025-03-11 07:30:00 
JellyfishLEDs   KEYWORD1 
setSingleColor  KEYWORD2 
updateLEDs      KEYWORD2 
clearLEDs       KEYWORD2 
// END OF GPT UPDATE FILE 
 
======================================= 
Library: lib\JellyfishQueue 
======================================= 
======================================= 
File: lib\JellyfishQueue\JellyfishQueue.h 
======================================= 
#ifndef JELLYFISHQUEUE_H
#define JELLYFISHQUEUE_H

#include <queue>
#include <string>
#include <Arduino.h>

class JellyfishQueue {
private:
    std::queue<std::string> queue;
    bool debugQueue;
public:
    JellyfishQueue();

    void enqueue(const std::string& item);
    std::string dequeue();
    std::string peek() const;
    bool isEmpty() const;
    void clear();
    size_t size() const;
    void processQueue();  // ✅ Now part of the class

    void setDebug(bool enable);
    bool getDebug() const;
};

#endif // JELLYFISHQUEUE_H
 
======================================= 
File: lib\JellyfishQueue\JellyfishQueue.cpp 
======================================= 
#include "JellyfishQueue.h"

/**
 * JellyfishQueue Implementation
 * Version: 2025-03-12
 */

JellyfishQueue::JellyfishQueue() : debugQueue(false) {}

void JellyfishQueue::enqueue(const std::string& item) {
    queue.push(item);
    if (debugQueue) {
        Serial.printf("[JellyfishQueue] Enqueued: %s at %lu ms\n", item.c_str(), millis());
    }
}

std::string JellyfishQueue::dequeue() {
    if (queue.empty()) {
        if (debugQueue) {
            Serial.printf("[JellyfishQueue] Dequeue attempted on empty queue at %lu ms\n", millis());
        }
        return "";
    }
    std::string item = queue.front();
    queue.pop();
    if (debugQueue) {
        Serial.printf("[JellyfishQueue] Dequeued: %s at %lu ms\n", item.c_str(), millis());
    }
    return item;
}

std::string JellyfishQueue::peek() const {
    if (queue.empty()) {
        if (debugQueue) {
            Serial.printf("[JellyfishQueue] Peek attempted on empty queue at %lu ms\n", millis());
        }
        return "";
    }
    if (debugQueue) {
        Serial.printf("[JellyfishQueue] Peek: %s at %lu ms\n", queue.front().c_str(), millis());
    }
    return queue.front();
}

bool JellyfishQueue::isEmpty() const {
    if (debugQueue) {
        Serial.printf("[JellyfishQueue] isEmpty check: %s at %lu ms\n", queue.empty() ? "true" : "false", millis());
    }
    return queue.empty();
}

void JellyfishQueue::clear() {
    while (!queue.empty()) {
        queue.pop();
    }
    if (debugQueue) {
        Serial.printf("[JellyfishQueue] Cleared at %lu ms\n", millis());
    }
}

size_t JellyfishQueue::size() const {
    if (debugQueue) {
        Serial.printf("[JellyfishQueue] Size check: %lu at %lu ms\n", queue.size(), millis());
    }
    return queue.size();
}

void JellyfishQueue::processQueue() {
    if (this->queue.empty()) return;  // ✅ Prevent empty queue processing

    if (this->queue.size() > 50) {  
        Serial.println("[WARNING] Queue Overflow Risk!");
    }

    std::string item = this->queue.front();
    this->queue.pop();
    if (debugQueue) {
    Serial.printf("[Queue] Processing: %s\n", item.c_str());}
}


// Debug control
void JellyfishQueue::setDebug(bool enable) {
    debugQueue = enable;
    Serial.printf("[JellyfishQueue] Debug mode %s at %lu ms\n", debugQueue ? "enabled" : "disabled", millis());
}

bool JellyfishQueue::getDebug() const {
    return debugQueue;
}
 
======================================= 
File: lib\JellyfishQueue\keywords.txt 
======================================= 
# JellyfishQueue Keywords
# Version: 2025-03-12

JellyfishQueue  KEYWORD1
enqueue         KEYWORD2
dequeue         KEYWORD2
isEmpty         KEYWORD2
clear           KEYWORD2
processQueue    KEYWORD2
setDebug        KEYWORD2
getDebug        KEYWORD2
 
WARNING: lib\JellyfishAudio not found Skipping... 
======================================= 
Library: lib\WiFiManager 
======================================= 
======================================= 
File: lib\WiFiManager\WiFiManager.h 
======================================= 
#ifndef WIFI_MANAGER_H
#define WIFI_MANAGER_H

#include <WiFi.h>  // Ensure inclusion of WiFi functions
#include "config.h"

/**
 * WiFiManager - Handles WiFi connection, disconnection, and reconnection.
 * Version: 2025-03-12
 */

class WiFiManager {
private:
    bool debugWiFi;  // Debug flag

public:
    WiFiManager();
    void begin();       // Connect to WiFi at startup
    void reconnect();   // Reconnects if disconnected
    void disconnect();  // Forces WiFi disconnection
    bool isConnected(); // Returns true if connected
    void setDebug(bool enable);
    bool getDebug() const;
};

#endif // WIFI_MANAGER_H
 
======================================= 
File: lib\WiFiManager\WiFiManager.cpp 
======================================= 
#include "WiFiManager.h"
#include <Arduino.h>

/**
 * WiFiManager Implementation
 * Version: 2025-03-12
 */

WiFiManager::WiFiManager() : debugWiFi(true) {}  // Default: Debug enabled

void WiFiManager::begin() {
    if (debugWiFi) Serial.printf("[WiFi] Connecting to %s\n", WIFI_SSID);

    WiFi.disconnect(true);
    WiFi.mode(WIFI_STA);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

    unsigned long startAttemptTime = millis();
    while (WiFi.status() != WL_CONNECTED && millis() - startAttemptTime < 10000) {
        delay(500);
        Serial.print(".");
    }

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("\n✅ [WiFi] CONNECTED!");
        Serial.print("[WiFi] IP Address: ");
        Serial.println(WiFi.localIP());
    } else {
        Serial.println("\n❌ [WiFi] Connection FAILED.");
    }
}

void WiFiManager::reconnect() {
    if (debugWiFi) Serial.println("[WiFi] Reconnecting...");
    WiFi.disconnect();
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
}

void WiFiManager::disconnect() {
    if (debugWiFi) Serial.println("[WiFi] Disconnecting...");
    WiFi.disconnect(true);
}

bool WiFiManager::isConnected() {
    return WiFi.status() == WL_CONNECTED;
}

void WiFiManager::setDebug(bool enable) {
    debugWiFi = enable;
    Serial.printf("[WiFi] Debug mode %s.\n", debugWiFi ? "enabled" : "disabled");
}

bool WiFiManager::getDebug() const {
    return debugWiFi;
}
 
======================================= 
File: lib\WiFiManager\keywords.txt 
======================================= 
# WiFiManager Keywords
# Version: 2025-03-12

WiFiManager  KEYWORD1
begin        KEYWORD2
reconnect    KEYWORD2
disconnect   KEYWORD2
isConnected  KEYWORD2
setDebug     KEYWORD2
getDebug     KEYWORD2
 
